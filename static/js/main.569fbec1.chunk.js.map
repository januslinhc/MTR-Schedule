{"version":3,"sources":["services/LangEnum.ts","services/LineRepo.ts","services/StationInfoService.ts","services/IColor.ts","NavigationBarDrawer/NavigationBarDrawer.tsx","ScheduleTable/ScheduleTable.tsx","BodyContainer/BodyContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LangEnum","LineRepo","code","names","lang","zh","value","en","stations","StationInfoService","timer","updateCallback","line","station","options","url","paramString1","paramString2","str","moment","format","crypto","update","digest","getURL","request","then","data","undefined","output","JSON","parse","selectedStation","instance","MTRColor","MTRText","useStyles","makeStyles","theme","createStyles","drawer","breakpoints","up","width","flexShrink","toolbar","mixins","drawerPaper","NULL_IStation","createLineOptions","setSelectedStation","setSelectedLine","getLabel","find","map","ListItem","button","onClick","lineCode","getInstance","getSchedule","onStationBtnClick","selected","key","style","padding","marginLeft","marginRight","preserveAspectRatio","viewBox","height","id","stroke","stroke-width","fill","fill-rule","x","y","cx","cy","r","ListItemText","primary","backgroundColor","color","Divider","NavigationBarDrawer","useState","classes","className","aria-label","Hidden","xsDown","implementation","Drawer","paper","variant","open","List","Typography","component","length","ele","setectedText","root","overflowX","table","platIcon","spacing","display","sheader","brightnessByColor","isHEX","indexOf","m","substr","match","parseInt","getTextColor","brightless","NO_RECORD","TableRow","TableCell","colSpan","align","RowsElements","direction","scheduleObj","status","Object","keys","platColorKey","split","row","seq","scope","strokeWidth","fillRule","fontFamily","fontSize","fontWeight","plat","ttnt","time","Chip","label","timeString","header","bgBrightlessSelect","bgBrightlessDest","textColorSelect","textColorDest","borderRadius","x1","y1","x2","y2","stopColor","stopOpacity","offset","transform","d","textAnchor","alignmentBaseline","ScheduleTable","setScheduleObj","curr_time","Grid","container","item","Box","textAlign","fontStyle","updateTime","sm","Paper","Table","TableHead","TableBody","content","BodyContainer","createMuiTheme","typography","join","App","appBar","menuButton","flexGrow","margin","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.569fbec1.chunk.js","sourcesContent":["export enum LangEnum {\n    en = \"en\", zh = \"zh\"\n}\n","import {ILine} from \"./ILine\";\nimport {LangEnum} from \"./LangEnum\";\n\nexport const LineRepo: ILine[] = [\n    {\n        code: 'TCL',\n        names: [\n            {\n                lang: LangEnum.zh,\n                value: \"東涌綫\"\n            },\n\n            {\n                lang: LangEnum.en,\n                value: \"Tung Chung Line\"\n            }\n        ],\n        stations: [\n            {\n                code: 'TUC',\n                names: [\n                    {\n                        lang: LangEnum.zh,\n                        value: \"東涌\"\n                    },\n                    {\n                        lang: LangEnum.en,\n                        value: \"Tung Chung\"\n                    }\n                ]\n            },\n\n            {\n                code: 'SUN',\n                names: [\n                    {\n                        lang: LangEnum.zh,\n                        value: \"欣澳\"\n                    },\n                    {\n                        lang: LangEnum.en,\n                        value: \"Sunny Bay\"\n                    }\n                ]\n            },\n\n            {\n                code: 'TSY',\n                names: [\n                    {\n                        lang: LangEnum.zh,\n                        value: \"青衣\"\n                    },\n                    {\n                        lang: LangEnum.en,\n                        value: \"Tsing Yi\"\n                    }\n                ]\n            },\n\n            {\n                code: 'LAK',\n                names: [\n                    {\n                        lang: LangEnum.zh,\n                        value: \"荔景\"\n                    },\n                    {\n                        lang: LangEnum.en,\n                        value: \"Lai King\"\n                    }\n                ]\n            },\n\n            {\n                code: 'NAC',\n                names: [\n                    {\n                        lang: LangEnum.zh,\n                        value: \"南昌\"\n                    },\n                    {\n                        lang: LangEnum.en,\n                        value: \"Nam Cheong\"\n                    }\n                ]\n            },\n\n            {\n                code: 'OLY',\n                names: [\n                    {\n                        lang: LangEnum.zh,\n                        value: \"奧運\"\n                    },\n                    {\n                        lang: LangEnum.en,\n                        value: \"Olympic\"\n                    }\n                ]\n            },\n\n            {\n                code: 'KOW',\n                names: [\n                    {\n                        lang: LangEnum.zh,\n                        value: \"九龍\"\n                    },\n                    {\n                        lang: LangEnum.en,\n                        value: \"Kowloon\"\n                    }\n                ]\n            },\n\n            {\n                code: 'HOK',\n                names: [\n                    {\n                        lang: LangEnum.zh,\n                        value: \"香港\"\n                    },\n                    {\n                        lang: LangEnum.en,\n                        value: \"Hong Kong\"\n                    }\n                ]\n            }\n        ]\n    },\n\n    {\n        code: 'WRL',\n        names: [\n            {\n                lang: LangEnum.en,\n                value: 'West Rail Line'\n            },\n            {\n                lang: LangEnum.zh,\n                value: '西鐵綫'\n            }\n        ],\n        stations: [\n            {\n                code: 'TUM',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Tuen Mun'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '屯門'\n                    }\n                ]\n            },\n\n            {\n                code: 'SIH',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Siu Hong'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '兆康'\n                    }\n                ]\n            },\n\n            {\n                code: 'TIS',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Tin Shui Wai'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '天水圍'\n                    }\n                ]\n            },\n\n            {\n                code: 'LOP',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Long Ping'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '朗屏'\n                    }\n                ]\n            },\n\n            {\n                code: 'YUL',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Yuen Long'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '元朗'\n                    }\n                ]\n            },\n\n            {\n                code: 'KSR',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Kam Sheung Road'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '錦上路'\n                    }\n                ]\n            },\n\n            {\n                code: 'TWW',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Tsuen Wan West'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '荃灣西'\n                    }\n                ]\n            },\n\n            {\n                code: 'MEF',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Mei Foo'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '美孚'\n                    }\n                ]\n            },\n\n            {\n                code: 'NAC',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Nam Cheong'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '南昌'\n                    }\n                ]\n            },\n\n            {\n                code: 'AUS',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Austin'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '柯士甸'\n                    }\n                ]\n            },\n\n            {\n                code: 'ETS',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'East Tsim Sha Tsui'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '尖東'\n                    }\n                ]\n            },\n\n            {\n                code: 'HUH',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Hung Hom'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '紅磡'\n                    }\n                ]\n            }\n        ]\n    },\n\n    {\n        code: 'AEL',\n        names: [\n            {\n                lang: LangEnum.zh,\n                value: '機場快線'\n            },\n\n            {\n                lang: LangEnum.en,\n                value: 'Airport Express'\n            }\n        ],\n        stations: [\n            {\n                code: 'AWE',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'AsiaWorld–Expo'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '博覽館'\n                    }\n                ]\n            },\n\n            {\n                code: 'AIR',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Airport'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '機場'\n                    }\n                ]\n            },\n\n            {\n                code: 'TSY',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Tsing Yi'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '青衣'\n                    }\n                ]\n            },\n\n            {\n                code: 'KOW',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Kowloon'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '九龍'\n                    }\n                ]\n            },\n\n            {\n                code: 'HOK',\n                names: [\n                    {\n                        lang: LangEnum.en,\n                        value: 'Hong Kong'\n                    },\n\n                    {\n                        lang: LangEnum.zh,\n                        value: '香港'\n                    }\n                ]\n            }\n        ]\n    }\n];\n","import * as request from \"request-promise-native\";\nimport * as moment from \"moment\";\nimport * as crypto from \"crypto\";\n\ndeclare type callback = (data: object) => void;\n\nexport class StationInfoService {\n    private static instance: StationInfoService;\n    private timer: any = null;\n    updateCallback?: callback;\n\n    getSchedule(line: string, station: string) {\n        const getURL = function (line: string, station: string) {\n            const base = \"http://mtr.api.ser.janus.pw/getSchedule.php?key=\";\n            //const base = \"https://mavmapp1044.azurewebsites.net/reverse_proxy/NT_v2/NTAppModule/getSchedule.php?key=\";\n            const paramString1 = line;\n            const paramString2 = station;\n            const mCurLang = \"en\";\n            const date = moment.default().format('YYYY-MM-DD');\n            const str = paramString1 + \"|\" + paramString2 + \"|\" + mCurLang + \"|\" + date + \"|\" + \"c90vfabc\";\n            const hash = crypto.createHash(\"sha1\").update(str, \"utf8\").digest(\"hex\");\n            const target = base + hash + \"&line=\" + paramString1 + \"&sta=\" + paramString2 + \"&lang=\" + mCurLang;\n            return target;\n        };\n\n        let options = {\n            url: getURL(line, station)\n        };\n\n        request.get(options).then(data => {\n            if (this.updateCallback != undefined) {\n                let output = JSON.parse(data);\n                output.selectedStation = station;\n                this.updateCallback(output);\n                //this.updateCallback(JSON.parse(`{\"status\":1,\"message\":\"successful\",\"curr_time\":\"2019-11-25 22:47:24\",\"sys_time\":\"2019-11-25 22:47:24\",\"isdelay\":\"N\",\"data\":{\"TCL-TSY\":{\"curr_time\":\"2019-11-25 22:47:24\",\"sys_time\":\"2019-11-25 22:47:24\",\"UP\":[{\"ttnt\":\"4\",\"valid\":\"Y\",\"plat\":\"3\",\"time\":\"2019-11-25 22:51:00\",\"source\":\"-\",\"dest\":\"TUC\",\"seq\":\"1\"},{\"ttnt\":\"14\",\"valid\":\"Y\",\"plat\":\"3\",\"time\":\"2019-11-25 23:02:00\",\"source\":\"+\",\"dest\":\"TUC\",\"seq\":\"2\"},{\"ttnt\":\"25\",\"valid\":\"Y\",\"plat\":\"3\",\"time\":\"2019-11-25 23:12:00\",\"source\":\"+\",\"dest\":\"TUC\",\"seq\":\"3\"},{\"ttnt\":\"33\",\"valid\":\"Y\",\"plat\":\"3\",\"time\":\"2019-11-25 23:21:00\",\"source\":\"+\",\"dest\":\"TUC\",\"seq\":\"4\"}],\"DOWN\":[{\"ttnt\":\"8\",\"valid\":\"Y\",\"plat\":\"4\",\"time\":\"2019-11-25 22:55:00\",\"source\":\"-\",\"dest\":\"HOK\",\"seq\":\"1\"},{\"ttnt\":\"17\",\"valid\":\"Y\",\"plat\":\"4\",\"time\":\"2019-11-25 23:05:00\",\"source\":\"+\",\"dest\":\"HOK\",\"seq\":\"2\"},{\"ttnt\":\"28\",\"valid\":\"Y\",\"plat\":\"4\",\"time\":\"2019-11-25 23:16:00\",\"source\":\"+\",\"dest\":\"HOK\",\"seq\":\"3\"},{\"ttnt\":\"37\",\"valid\":\"Y\",\"plat\":\"4\",\"time\":\"2019-11-25 23:24:00\",\"source\":\"+\",\"dest\":\"HOK\",\"seq\":\"4\"}]}}}`));\n            }\n        });\n    }\n\n    public static getInstance(): StationInfoService {\n        if (StationInfoService.instance === undefined) {\n            StationInfoService.instance = new StationInfoService();\n        }\n\n        return StationInfoService.instance;\n    }\n\n}\n","export interface IColor {\n    code: string,\n    color: string\n}\n\nexport const MTRColor: any = {\n    \"TCL\": \"#f7943e\",\n    \"TUC\": \"#8040c0\",\n    \"SUN\": \"#808080\",\n    \"TSY\": \"#89b0b7\",\n    \"LAK\": \"#bb2200\",\n    \"NAC\": \"#ffff80\",\n    \"OLY\": \"#4682b4\",\n    \"KOW\": \"#eeeded\",\n    \"HOK\": \"#ffffff\",\n\n    /////\n    \"WRL\": \"#a3238f\",\n    \"TUM\": \"#035F94\",\n    \"SIH\": \"#33CC99\",\n    \"TIS\": \"#FFCF2A\",\n    \"LOP\": \"#F697B4\",\n    \"YUL\": \"#42D7DC\",\n    \"KSR\": \"#A11919\",\n    \"TWW\": \"#A81C07\",\n    \"MEF\": \"#0088DD\",\n    \"AUS\": \"#D05A3A\",\n    \"ETS\": \"#ffff00\",\n    \"HUH\": \"#ff0077\",\n\n    \"AEL\": \"#00888a\",\n    \"AIR\": \"#808080\",\n    \"AWE\": \"#ffffff\"\n};\n\nexport const MTRText: any = {\n    \"TUC\": {\n        \"en\": \"Tung Chung\",\n        \"zh\": \"東涌\"\n    },\n    \"SUN\": {\n        \"en\": \"Sunny Bay\",\n        \"zh\": \"欣澳\"\n    },\n    \"TSY\": {\n        \"en\": \"Tsing Yi\",\n        \"zh\": \"青衣\"\n    },\n    \"LAK\": {\n        \"en\": \"Lai King\",\n        \"zh\": \"荔景\"\n    },\n\n    \"NAC\": {\n        \"en\": \"Nam Cheong\",\n        \"zh\": \"南昌\"\n    },\n\n    \"OLY\": {\n        \"en\": \"Olympic\",\n        \"zh\": \"奧運\"\n    },\n\n    \"KOW\": {\n        \"en\": \"Kowloon\",\n        \"zh\": \"九龍\"\n    },\n\n    \"HOK\": {\n        \"en\": \"Hong Kong\",\n        \"zh\": \"香港\"\n    },\n\n    /////\n\n    \"TUM\": {\n        \"en\": \"Tuen Mun\",\n        \"zh\": \"屯門\"\n    },\n\n    \"SIH\": {\n        \"en\": \"Siu Hong\",\n        \"zh\": \"兆康\"\n    },\n\n    \"TIS\": {\n        \"en\": \"Tin Shui Wai\",\n        \"zh\": \"天水圍\"\n    },\n\n    \"LOP\": {\n        \"en\": \"Long Ping\",\n        \"zh\": \"朗屏\"\n    },\n\n    \"YUL\": {\n        \"en\": \"Yuen Long\",\n        \"zh\": \"元朗\"\n    },\n\n    \"KSR\": {\n        \"en\": \"Kam Sheung Road\",\n        \"zh\": \"錦上路\"\n    },\n\n    \"TWW\": {\n        \"en\": \"Tsuen Wan West\",\n        \"zh\": \"荃灣西\"\n    },\n\n    \"MEF\": {\n        \"en\": \"Mei Foo\",\n        \"zh\": \"美孚\"\n    },\n\n    \"AUS\": {\n        \"en\": \"Austin\",\n        \"zh\": \"柯士甸\"\n    },\n\n    \"ETS\": {\n        \"en\": \"East Tsim Sha Tsui\",\n        \"zh\": \"尖東\"\n    },\n\n    \"HUH\": {\n        \"en\": \"Hung Hom\",\n        \"zh\": \"紅磡\"\n    },\n\n\n    \"AIR\": {\n        \"en\": \"Airport\",\n        \"zh\": \"機場\"\n    },\n    \"AWE\": {\n        \"en\": \"AsiaWorld–Expo\",\n        \"zh\": \"博覽館\"\n    }\n\n};\n","import React, {useState} from 'react';\nimport {\n    Container,\n    createStyles,\n    Divider,\n    Drawer,\n    Hidden,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    Theme,\n    Typography\n} from \"@material-ui/core\";\nimport {LineRepo} from \"../services/LineRepo\";\nimport {ILine} from \"../services/ILine\";\nimport {LangEnum} from \"../services/LangEnum\";\nimport {IStation} from \"../services/IStation\";\nimport './NavigationBarDrawer.css';\nimport {StationInfoService} from '../services/StationInfoService';\nimport {MTRColor} from \"../services/IColor\";\n\n\ninterface Props {\n}\n\ninterface State {\n    selectedStation?: IStation\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    drawer: {\n        [theme.breakpoints.up('sm')]: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: drawerWidth,\n    },\n}));\n\nconst NULL_IStation: IStation = {\n    code: \"\",\n    names: [{\n        lang: LangEnum.en,\n        value: \"\"\n    }]\n};\n\nconst onStationBtnClick = (lineCode: string, station: IStation, setSelectedStation: any, setSelectedLine: any) => {\n    setSelectedStation(station);\n    setSelectedLine(lineCode);\n    //console.log(selectedStation);\n    StationInfoService.getInstance().getSchedule(lineCode, station.code);\n};\n\nconst createLineOptions = (line: ILine, setSelectedStation: any, setSelectedLine: any, selectedStation: any) => {\n\n    const getLabel = (station: any) => {\n        const lang = station.names.find((value: any) => value.lang === LangEnum.zh);\n        if (lang) {\n            return lang.value;\n        } else {\n            return \"???\";\n        }\n    };\n\n    const options = line.stations.map(station => (\n        <ListItem button onClick={() => {\n            onStationBtnClick(line.code, station, setSelectedStation, setSelectedLine)\n        }}\n                  selected={selectedStation === station}\n                  key={station.code}\n                  style={{padding: '0px'}}\n        >\n\n            <div style={{marginLeft: '10px', marginRight: '10px'}}>\n                <svg preserveAspectRatio=\"none\" viewBox=\"0 0 36 52\" width=\"36px\" height=\"52px\">\n                    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                        <g id=\"Group\">\n                            <rect id=\"Rectangle\" fill={MTRColor[line.code]} x=\"9\" y=\"0\" width=\"19\" height=\"52\"></rect>\n                            <circle id=\"Oval\" stroke=\"#04274E\" stroke-width=\"5\" fill=\"#FFFFFF\" cx=\"18\" cy=\"26\"\n                                    r=\"15.5\"></circle>\n                        </g>\n                    </g>\n                </svg>\n            </div>\n\n            <ListItemText primary={getLabel(station)}/>\n        </ListItem>\n    ));\n\n    return (\n        <div key={line.code}>\n            <ListItem style={{backgroundColor: MTRColor[line.code], color: '#fff'}}>\n                <ListItemText primary={getLabel(line)}/>\n            </ListItem>\n\n            <Divider/>\n\n            {options}\n        </div>\n    );\n};\n\nconst drawer = (classes: any, setSelectedStation: any, setSelectedLine: any, selectedStation: any) => {\n    const setectedText = (selectedStation: any) => {\n        if (selectedStation && selectedStation.names && selectedStation.names.length > 1) {\n            return selectedStation.names.find((ele: any) => ele.lang === LangEnum.zh).value;\n        } else {\n            return \"\"\n        }\n    };\n\n    return (\n        <div>\n            <List>\n                <ListItem>\n                    <Typography variant=\"h5\" component=\"h3\">\n                        >> {setectedText(selectedStation)}\n                    </Typography>\n                    <Divider/>\n                </ListItem>\n                {LineRepo.map(line => createLineOptions(line, setSelectedStation, setSelectedLine, selectedStation))}\n            </List>\n        </div>\n    );\n};\n\nexport const NavigationBarDrawer: React.FC = () => {\n    const [selectedStation, setSelectedStation] = useState(NULL_IStation);\n    const [selectedLine, setSelectedLine] = useState(\"\");\n    const classes = useStyles();\n\n    const render = () => {\n        return (\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                <Hidden xsDown implementation=\"css\">\n                    <Drawer\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        variant=\"permanent\"\n                        open\n                    >\n                        {drawer(classes, setSelectedStation, setSelectedLine, selectedStation)}\n                    </Drawer>\n                </Hidden>\n            </nav>\n        );\n    };\n\n    return render();\n};\n","import React, {useState} from 'react';\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport {Paper, Table, TableHead, TableRow, TableCell, TableBody, Grid, Box, Chip} from '@material-ui/core';\nimport {StationInfoService} from \"../services/StationInfoService\";\nimport * as moment from \"moment\";\nimport {MTRColor, MTRText} from '../services/IColor';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            overflowX: 'auto',\n        },\n        table: {\n            //minWidth: 650,\n        },\n\n        platIcon: {\n            width: theme.spacing(5),\n            display: 'inline-block'\n        },\n\n        sheader: {\n            width: '100%',\n            display: 'inline-block',\n        }\n    }),\n);\n\nconst brightnessByColor = (color: string) => {\n    var color = \"\" + color, isHEX = color.indexOf(\"#\") == 0, isRGB = color.indexOf(\"rgb\") == 0;\n    if (isHEX) {\n        var m = color.substr(1).match(color.length == 7 ? /(\\S{2})/g : /(\\S{1})/g);\n        if (m && m.length == 3) {\n            var r = parseInt(m[0], 16), g = parseInt(m[1], 16), b = parseInt(m[2], 16);\n            return ((r * 299) + (g * 587) + (b * 114)) / 1000;\n        }\n    }\n\n    return -1;\n};\n\nconst getTextColor = (brightless: Number) => {\n    if (brightless > 160) {\n        return \"#193036\";\n    } else {\n        return \"#FFF\";\n    }\n};\n\n\nconst NO_RECORD = (<TableRow key={0}>\n    <TableCell colSpan={1} align={\"center\"}>\n        未能提供資料。\n    </TableCell>\n</TableRow>);\n\nconst RowsElements = (direction: string, scheduleObj: any, classes: any) => {\n    if (scheduleObj && scheduleObj !== {} && scheduleObj.status !== undefined && scheduleObj.data[Object.keys(scheduleObj.data)[0]][direction]) {\n        //console.log(scheduleObj.data[Object.keys(scheduleObj.data)[0]]);\n        const platColorKey = Object.keys(scheduleObj.data)[0].split(\"-\")[0];\n        const timeString = (row: any) => {\n            if (row.ttnt > 0) {\n                return (moment.default(row.time).format('h:mm:ss a'));\n            } else {\n                return (<Chip\n                    label=\"啟程中\"\n                    color=\"secondary\"\n                />);\n            }\n        };\n\n\n        return scheduleObj.data[Object.keys(scheduleObj.data)[0]][direction].map((row: any) => (\n            <TableRow key={row.seq}>\n                <TableCell component=\"th\" scope=\"row\" align={\"center\"}>\n                    <div className={classes.platIcon}>\n                        <svg viewBox=\"0 0 264 264\" preserveAspectRatio=\"none\">\n                            <g id=\"Page-1\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                                <circle id=\"Oval\" fill={MTRColor[platColorKey]} cx=\"132\" cy=\"132\" r=\"132\"></circle>\n                                <text id=\"2\" fontFamily=\"ArialMT, Arial\" fontSize=\"230\" fontWeight=\"normal\"\n                                      fill=\"#FFFFFF\">\n                                    <tspan x=\"68\" y=\"208\">{row.plat}</tspan>\n                                </text>\n                            </g>\n                        </svg>\n                    </div>\n\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\" align={\"center\"}>\n                    {timeString(row)}\n                </TableCell>\n            </TableRow>\n        ))\n    } else {\n        return NO_RECORD;\n    }\n};\n\nconst header = (direction: string, scheduleObj: any, classes: any) => {\n    if (scheduleObj && scheduleObj !== {} && scheduleObj.status !== undefined && scheduleObj.data[Object.keys(scheduleObj.data)[0]][direction]) {\n        const bgBrightlessSelect = brightnessByColor(MTRColor[scheduleObj.selectedStation]);\n        const bgBrightlessDest = brightnessByColor(MTRColor[scheduleObj.data[Object.keys(scheduleObj.data)[0]][direction][0]['dest']]);\n\n        const textColorSelect = getTextColor(bgBrightlessSelect);\n        const textColorDest = getTextColor(bgBrightlessDest);\n\n        return (<div className={classes.sheader}>\n            <svg preserveAspectRatio=\"none\" viewBox=\"0 0 512 142\" style={{borderRadius: '10px'}}>\n                <defs>\n                    <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"100%\" id=\"linearGradient-1\">\n                        <stop stopColor=\"#000000\" stopOpacity=\"0.697209013\" offset=\"0%\"></stop>\n                        <stop stopColor=\"#FFFFFF\" offset=\"100%\"></stop>\n                    </linearGradient>\n                </defs>\n                <g id=\"Group-2\" transform=\"translate(-74.000000, -470.000000)\">\n                    <rect id=\"Rectangle\"\n                          fill={MTRColor[scheduleObj.data[Object.keys(scheduleObj.data)[0]][direction][0]['dest']]}\n                          x=\"330\" y=\"470\" width=\"256\" height=\"142\"></rect>\n                    <rect id=\"Rectangle\" fill={MTRColor[scheduleObj.selectedStation]} x=\"74\" y=\"470\" width=\"256\"\n                          height=\"142\"></rect>\n                    <path id=\"Line\"\n                          d=\"M348,541.208333 L293,541.208333 L291,541.208333 L291,537.208333 L293,537.208333 L348,537.208333 L348,527.208333 L372,539.208333 L348,551.208333 L348,541.208333 Z\"\n                          fill=\"url(#linearGradient-1)\" fillRule=\"nonzero\"></path>\n\n                    <text x=\"203\" y=\"560\" fontFamily=\"ArialMT, Arial\" fontSize=\"32\" fontWeight=\"normal\"\n                          fill={textColorSelect} textAnchor=\"middle\"\n                          alignmentBaseline=\"central\">{MTRText[scheduleObj.selectedStation]['en']}</text>\n                    <text x=\"201\" y=\"524\" fontFamily=\"PingFangHK-Regular, PingFang HK\" fontSize=\"32\"\n                          fontWeight=\"normal\" fill={textColorSelect} textAnchor=\"middle\"\n                          alignmentBaseline=\"central\">{MTRText[scheduleObj.selectedStation]['zh']}</text>\n\n\n                    <text x=\"466\" y=\"565\" fontFamily=\"ArialMT, Arial\" fontSize=\"32\" fontWeight=\"normal\"\n                          fill={textColorDest} textAnchor=\"middle\"\n                          alignmentBaseline=\"central\">{MTRText[scheduleObj.data[Object.keys(scheduleObj.data)[0]][direction][0]['dest']]['en']}</text>\n                    <text x=\"458\" y=\"524\" fontFamily=\"PingFangHK-Regular, PingFang HK\" fontSize=\"32\"\n                          fontWeight=\"normal\" fill={textColorDest} textAnchor=\"middle\"\n                          alignmentBaseline=\"central\">{MTRText[scheduleObj.data[Object.keys(scheduleObj.data)[0]][direction][0]['dest']]['zh']}</text>\n\n\n                </g>\n            </svg>\n        </div>);\n    } else {\n        return (<div></div>);\n    }\n};\n\nconst updateTime = (scheduleObj: any) => {\n    if (scheduleObj && scheduleObj !== {} && scheduleObj.status !== undefined) {\n        const timeString = moment.default(scheduleObj.curr_time).format('YYYY-MM-DD h:mm:ss a');\n        return (<Grid container spacing={0}>\n            <Grid item>\n                <Box textAlign=\"left\" style={{fontStyle: 'italic'}}>\n                    更新時間: {timeString}\n                </Box>\n            </Grid>\n        </Grid>);\n    } else {\n        return (<div></div>);\n    }\n};\n\n/**\n *\n * JSON.parse(`{\"status\":1,\"message\":\"successful\",\"curr_time\":\"2019-11-25 22:47:24\",\"sys_time\":\"2019-11-25 22:47:24\",\"isdelay\":\"N\",\"data\":{\"TCL-TSY\":{\"curr_time\":\"2019-11-25 22:47:24\",\"sys_time\":\"2019-11-25 22:47:24\",\"UP\":[{\"ttnt\":\"4\",\"valid\":\"Y\",\"plat\":\"3\",\"time\":\"2019-11-25 22:51:00\",\"source\":\"-\",\"dest\":\"TUC\",\"seq\":\"1\"},{\"ttnt\":\"14\",\"valid\":\"Y\",\"plat\":\"3\",\"time\":\"2019-11-25 23:02:00\",\"source\":\"+\",\"dest\":\"TUC\",\"seq\":\"2\"},{\"ttnt\":\"25\",\"valid\":\"Y\",\"plat\":\"3\",\"time\":\"2019-11-25 23:12:00\",\"source\":\"+\",\"dest\":\"TUC\",\"seq\":\"3\"},{\"ttnt\":\"33\",\"valid\":\"Y\",\"plat\":\"3\",\"time\":\"2019-11-25 23:21:00\",\"source\":\"+\",\"dest\":\"TUC\",\"seq\":\"4\"}],\"DOWN\":[{\"ttnt\":\"8\",\"valid\":\"Y\",\"plat\":\"4\",\"time\":\"2019-11-25 22:55:00\",\"source\":\"-\",\"dest\":\"HOK\",\"seq\":\"1\"},{\"ttnt\":\"17\",\"valid\":\"Y\",\"plat\":\"4\",\"time\":\"2019-11-25 23:05:00\",\"source\":\"+\",\"dest\":\"HOK\",\"seq\":\"2\"},{\"ttnt\":\"28\",\"valid\":\"Y\",\"plat\":\"4\",\"time\":\"2019-11-25 23:16:00\",\"source\":\"+\",\"dest\":\"HOK\",\"seq\":\"3\"},{\"ttnt\":\"37\",\"valid\":\"Y\",\"plat\":\"4\",\"time\":\"2019-11-25 23:24:00\",\"source\":\"+\",\"dest\":\"HOK\",\"seq\":\"4\"}]}}}`);\n */\n\nexport const ScheduleTable: React.FC = () => {\n    const classes = useStyles();\n    const [scheduleObj, setScheduleObj] = useState(({} as any));\n\n    if (StationInfoService.getInstance().updateCallback === undefined) {\n        StationInfoService.getInstance().updateCallback = (data: any) => {\n            setScheduleObj(data);\n        };\n    }\n\n    return (\n        <div>\n            {updateTime(scheduleObj)}\n            <Grid container spacing={4}>\n                <Grid item sm={6}>\n                    {header('UP', scheduleObj, classes)}\n                    <Paper className={classes.root}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align={\"center\"}>平台</TableCell>\n                                    <TableCell align={\"center\"}>時間</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {RowsElements('UP', scheduleObj, classes)}\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </Grid>\n                <Grid item sm={6}>\n                    {header('DOWN', scheduleObj, classes)}\n                    <Paper className={classes.root}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align={\"center\"}>平台</TableCell>\n                                    <TableCell align={\"center\"}>時間</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {RowsElements('DOWN', scheduleObj, classes)}\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { ScheduleTable } from '../ScheduleTable/ScheduleTable';\nimport { Container, makeStyles, Theme, createStyles } from '@material-ui/core';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        content: {\n            [theme.breakpoints.up('sm')]: {\n                marginLeft: drawerWidth\n            },\n            flexGrow: 1,\n            padding: theme.spacing(3),\n        },\n        toolbar: theme.mixins.toolbar,\n\n    }),\n);\n\nexport const BodyContainer: React.FC = () => {\n    const classes = useStyles();\n    return (\n        <main className={classes.content}>\n            <div className={classes.toolbar} />\n            <ScheduleTable />\n        </main>\n    )\n};","import React from 'react';\nimport './App.css';\nimport {\n    AppBar,\n    Button,\n    Container, createStyles,\n    CssBaseline,\n    Divider,\n    Drawer, Hidden,\n    IconButton, LinearProgress, List, ListItem, ListItemText, Paper,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport {makeStyles, withStyles, Theme, ThemeProvider} from '@material-ui/core/styles';\nimport {NavigationBarDrawer} from './NavigationBarDrawer/NavigationBarDrawer';\nimport {BodyContainer} from './BodyContainer/BodyContainer';\nimport {createMuiTheme} from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: [\n            'Noto Sans TC',\n            'Noto Sans HK',\n            'sans-serif'\n        ].join(','),\n    }\n});\n\nconst App: React.FC = () => {\n    const drawerWidth = 240;\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                display: 'flex',\n            },\n            appBar: {\n                [theme.breakpoints.up('sm')]: {\n                    width: `calc(100% - ${drawerWidth}px)`,\n                    marginLeft: drawerWidth,\n                },\n            },\n            menuButton: {\n                marginRight: theme.spacing(2),\n                [theme.breakpoints.up('sm')]: {\n                    display: 'none',\n                },\n            },\n            content: {\n                flexGrow: 1,\n                padding: theme.spacing(3),\n            },\n            margin: {\n                margin: theme.spacing(1),\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline/>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <Typography variant=\"h6\">\n                        MTR 時間表\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <NavigationBarDrawer/>\n            <BodyContainer/>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}